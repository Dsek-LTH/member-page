scalar UUID

extend type Query {
  bookingRequests(filter: BookingFilter): [BookingRequest!]
  bookingRequest(id: UUID!): BookingRequest
  bookables: [Bookable!]
}

extend type Mutation {
  bookingRequest: BookingRequestMutations
}

extend type Member @key(fields: "id") {
  id: UUID! @external
}

scalar Datetime

type Bookable @key(fields: "id") {
  id: UUID!
  name: String!
  name_en: String!
}

type BookingRequest @key(fields: "id") {
  id: UUID!
  start: Datetime!
  end: Datetime!
  event: String!
  booker: Member!
  what: [Bookable]!
  status: BookingStatus!
  created: Datetime!
  last_modified: Datetime
}

enum BookingStatus {
  PENDING
  ACCEPTED
  DENIED
}

input BookingFilter {
  from: Datetime
  to: Datetime
  status: BookingStatus
  what: String
}

type BookingRequestMutations {
  accept(id: UUID!): Boolean
  deny(id: UUID!): Boolean
  remove(id: UUID!): BookingRequest
  update(id: UUID!, input: UpdateBookingRequest!): BookingRequest
  create(input: CreateBookingRequest!): BookingRequest
}

input UpdateBookingRequest {
  start: Datetime
  end: Datetime
  what: [String]
  event: String
}

input CreateBookingRequest {
  start: Datetime!
  end: Datetime!
  what: [String!]!
  event: String!
  booker_id: UUID!
}

input UpdateBookingRequestStatus {
  status: BookingStatus
}