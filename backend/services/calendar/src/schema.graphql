type Event @key(fields: "id") {
  id: Int!
  title: String!
  title_en: String
  location: String
  organizer: String!
  author: Member!
  description: String!
  description_en: String
  short_description: String!
  short_description_en: String
  link: String
  start_datetime: Datetime!
  end_datetime: Datetime!
}

scalar Datetime

input EventFilter {
  id: Int
  start_datetime: Datetime
  end_datetime: Datetime
}

extend type Member @key(fields: "id") {
  id: Int! @external
}

extend type Query {
  event(id: Int!): Event
  events(filter: EventFilter): [Event!]!
}

extend type Mutation {
  event: EventMutations
}

type EventMutations {
  create(input: CreateEvent!): Event
  update(id: Int!, input: UpdateEvent!): Event
  remove(id: Int!): Event
}

input CreateEvent {
  title: String!
  title_en: String
  description: String!
  organizer: String!
  location: String!
  description_en: String
  short_description: String!
  short_description_en: String
  link: String
  start_datetime: Datetime!
  end_datetime: Datetime!
}

input UpdateEvent {
  title: String
  title_en: String
  short_description: String
  short_description_en: String
  description: String
  description_en: String
  organizer: String
  location: String
  link: String
  start_datetime: Datetime
  end_datetime: Datetime
}
