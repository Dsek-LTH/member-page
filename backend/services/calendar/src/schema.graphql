type Event @key(fields: "id") {
  id: UUID!
  title: String
  location: String
  organizer: String!
  author: Member!
  description: String
  short_description: String
  link: String
  start_datetime: Datetime!
  end_datetime: Datetime!
  number_of_updates: Int!
}

scalar Datetime
scalar UUID

input EventFilter {
  id: UUID
  start_datetime: Datetime
  end_datetime: Datetime
}

extend type Member @key(fields: "id") {
  id: UUID! @external
}

enum Language {
  sv
  en
}

extend type Query {
  event(id: UUID!, lang: Language): Event
  events(page: Int, perPage: Int, filter: EventFilter): EventPagination
}

type EventPagination {
  events: [Event]!
  pageInfo: PaginationInfo
}

type PaginationInfo {
  totalPages: Int!
  totalItems: Int!
  page: Int!
  perPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

extend type Mutation {
  event: EventMutations
}

type EventMutations {
  create(input: CreateEvent!): Event
  update(id: UUID!, input: UpdateEvent!): Event
  remove(id: UUID!): Event
}

input CreateEvent {
  title: String!
  title_en: String
  description: String!
  organizer: String!
  location: String!
  description_en: String
  short_description: String!
  short_description_en: String
  link: String
  start_datetime: Datetime!
  end_datetime: Datetime!
}

input UpdateEvent {
  title: String
  title_en: String
  short_description: String
  short_description_en: String
  description: String
  description_en: String
  organizer: String
  location: String
  link: String
  start_datetime: Datetime
  end_datetime: Datetime
}
