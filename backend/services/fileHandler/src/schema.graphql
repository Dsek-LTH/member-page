scalar Date

type FileData @key(fields: "id") {
    id: String!
    name: String!
    ext: String
    isDir: Boolean
    isHidden: Boolean
    isSymlink: Boolean
    isEncrypted: Boolean
    openable: Boolean
    selectable: Boolean
    draggable: Boolean
    droppable: Boolean
    dndOpenable: Boolean
    size: Int
    modDate: Date
    childrenCount: Int
    color: String
    icon: String
    thumbnailUrl: String
}

type fileChange {
  oldFile: FileData,
  file: FileData!
}

type DocumentsFileMutations {
    move(fileNames: [String!]!, newFolder: String!): [fileChange]
    remove(fileNames: [String!]!): [String]
    rename(fileName: String!, newFileName: String!): fileChange
}


extend type Query {
  bucket(name: String!, prefix: String!): [FileData!]
  presignedPutDocumentUrl(fileName: String!): String
}

extend type Mutation {
  document: DocumentsFileMutations,
}