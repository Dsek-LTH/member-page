scalar Datetime
scalar Url
scalar UUID

extend type Query {
  news(page: Int! = 0, perPage: Int! = 20): ArticlePagination
  article(id: UUID!): Article
  markdown(name: String!): Markdown
  markdowns: [Markdown]!
  tags: [Tag]!
  token(expoToken: String!): Token
}

extend type Mutation {
  article: ArticleMutations
  markdown: MarkdownMutations
  token: TokenMutations
  tags: TagMutations
}

type Markdown @key(fields: "name") {
  name: String!
  markdown: String!
  markdown_en: String
}

type Token @key(fields: "id") {
  id: UUID!
  expoToken: String!
  memberId: UUID
  tagSubscriptions: [Tag]!
}

union Author = Member | Mandate

type Article @key(fields: "id") {
  id: UUID!
  body: String!
  bodyEn: String
  header: String!
  headerEn: String
  author: Author!
  publishedDatetime: Datetime!
  imageUrl: Url
  latestEditDatetime: Datetime
  likes: Int!
  isLikedByMe: Boolean!
  tags: [Tag]!
}

type Tag @key(fields: "id") {
  id: UUID!
  name: String!
  nameEn: String!
  color: String
  icon: String
}

type PaginationInfo {
  totalPages: Int!
  totalItems: Int!
  page: Int!
  perPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type ArticlePagination {
  articles: [Article]!
  pageInfo: PaginationInfo!
}

extend type Member @key(fields: "id") {
  id: UUID! @external
}

extend type Mandate @key(fields: "id") {
  id: UUID! @external
}

type ArticleMutations {
  create(input: CreateArticle!): CreateArticlePayload
  update(id: UUID!, input: UpdateArticle!): UpdateArticlePayload
  remove(id: UUID!): ArticlePayload
  like(id: UUID!): ArticlePayload
  dislike(id: UUID!): ArticlePayload
  presignedPutUrl(fileName: String!): String
  addTags(id: UUID!, tagIds: [UUID!]!): [UUID!]
  removeTags(id: UUID!, tagIds: [UUID!]!): Int
}

type MarkdownMutations {
  create(input: CreateMarkdown!): Markdown
  update(name: String!, input: UpdateMarkdown!): Markdown
}

type TagMutations {
  create(input: CreateTag!): Tag
  update(id: UUID!, input: UpdateTag!): Tag
}

type TokenMutations {
  register(expoToken: String!): Token
  subscribe(expoToken: String!, tagIds: [UUID!]!): [UUID!]
  unsubscribe(expoToken: String!, tagIds: [UUID!]!): Int
}

type CreateArticlePayload {
  article: Article!
  uploadUrl: Url
}

type UpdateArticlePayload {
  article: Article!
  uploadUrl: Url
}

type MarkdownPayload {
  markdown: Markdown!
}

type ArticlePayload {
  article: Article!
}

input CreateArticle {
  header: String!
  headerEn: String
  body: String!
  bodyEn: String
  imageName: String
  mandateId: UUID
  tagIds: [UUID!]
  sendNotification: Boolean
}

input UpdateArticle {
  header: String
  headerEn: String
  body: String
  bodyEn: String
  imageName: String
  mandateId: UUID
}

input UpdateMarkdown {
  markdown: String
  markdown_en: String
}

input CreateMarkdown {
  name: String!
  markdown: String
  markdown_en: String
}

input UpdateTag {
  name: String
  nameEn: String
  color: String
  icon: String
}

input CreateTag {
  name: String!
  nameEn: String
  color: String
  icon: String
}
