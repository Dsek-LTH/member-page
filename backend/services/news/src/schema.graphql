scalar Datetime
scalar Url
scalar UUID

enum Language {
  sv
  en
}

extend type Query {
  news(page: Int! = 0, perPage: Int! = 20): ArticlePagination
  article(id: UUID!, lang: Language): Article
}

extend type Mutation {
  article: ArticleMutations,
}

union Author = Member | Mandate

type Article @key(fields: "id") {
  id: UUID!
  body: String
  header: String
  author: Author!
  publishedDatetime: Datetime!
  imageUrl: Url
  latestEditDatetime: Datetime
}

type PaginationInfo {
  totalPages: Int!
  totalItems: Int!
  page: Int!
  perPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type ArticlePagination {
  articles: [Article]!
  pageInfo: PaginationInfo!
}

extend type Member @key(fields: "id") {
  id: UUID! @external
}

extend type Mandate @key(fields: "id") {
  id: UUID! @external
}

type ArticleMutations {
  create(input: CreateArticle!): CreateArticlePayload
  update(id: UUID!, input: UpdateArticle!): UpdateArticlePayload
  remove(id: UUID!): RemoveArticlePayload
  presignedPutUrl(fileName: String!): String
}

type CreateArticlePayload {
  article: Article!,
  uploadUrl: Url,
}

type UpdateArticlePayload {
  article: Article!,
  uploadUrl: Url,
}

type RemoveArticlePayload {
  article: Article!,
}

input CreateArticle {
  header: String!,
  headerEn: String,
  body: String!,
  bodyEn: String,
  imageName: String,
  mandateId: UUID,
}

input UpdateArticle {
  header: String,
  headerEn: String,
  body: String,
  bodyEn: String,
  imageName: String,
  mandateId: UUID,
}
