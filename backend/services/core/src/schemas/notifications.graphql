extend type Query {
  myNotifications: [Notification!]!
  token(expo_token: String!): Token
  myTagSubscriptions: [Tag!]!
  mySubscriptionSettings: [SubscriptionSetting!]!
}

extend type Mutation {
  markAsRead(ids: [UUID!]!): [Notification!]!
  deleteNotification(id: UUID!): [Notification!]!
  deleteNotifications(ids: [UUID!]!): [Notification!]!
  token: TokenMutations!
  tagSubscriptions: TagSubscriptionsMutations!
}


type Token @key(fields: "id") {
  id: UUID!
  expo_token: String!
  memberId: UUID
}

type TokenMutations {
  register(expo_token: String!): Token
}

type TagSubscriptionsMutations {
  subscribe(tagIds: [UUID!]!): [UUID!]
  unsubscribe(tagIds: [UUID!]!): Int
}

type SubscriptionSetting {
  id: UUID!
  type: String!
  pushNotification: Boolean!
}

type Notification {
  id: ID!
  type: String!
  createdAt: Date!
  updatedAt: Date!
  title: String!
  message: String!
  link: String!
  readAt: Date
}
