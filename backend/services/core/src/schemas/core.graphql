extend type Query {
  me: Member
  members(
    page: Int! = 0
    perPage: Int! = 10
    filter: MemberFilter
  ): MemberPagination
  member(id: UUID, student_id: String): Member
  memberById(id: UUID): Member
  pings: [Ping!]!
  positions(
    page: Int! = 0
    perPage: Int! = 10
    filter: PositionFilter
  ): PositionPagination
  committees(
    page: Int! = 0
    perPage: Int! = 10
    filter: CommitteeFilter
  ): CommitteePagination
  mandatePagination(
    page: Int! = 0
    perPage: Int! = 10
    filter: MandateFilter
  ): MandatePagination
  door(name: String!): Door
  doors: [Door!]
  api(name: String!): Api
  apis: [Api!]
  """
  returns all apis the signed in member has access to.
  """
  apiAccess: [Api!]
  adminSettings: [AdminSetting!]!
}

extend type Mutation {
  member: MemberMutations
  position: PositionMutations
  committee: CommitteeMutations
  mandate: MandateMutations
  access: AccessMutations
  admin: AdminMutations
}

type Member @key(fields: "id") {
  id: UUID!
  student_id: String
  first_name: String
  nickname: String
  last_name: String
  class_programme: String
  class_year: Int
  picture_path: String
  mandates(onlyActive: Boolean = false): [Mandate!]
  customAuthorOptions: [CustomAuthor!]
  canPing: Boolean
  food_preference: String
}

type MemberPagination {
  members: [Member!]!
  pageInfo: PaginationInfo!
}

type Position @key(fields: "id") {
  id: String!
  name: String
  nameEn: String
  description: String
  descriptionEn: String
  committee: Committee
  email: String
  emailAliases: [String!]
  active: Boolean
  boardMember: Boolean
  activeMandates: [Mandate]
}

type PositionPagination {
  positions: [Position!]!
  pageInfo: PaginationInfo!
}

type Committee @key(fields: "id") {
  id: UUID!
  name: String
  name_en: String
  shortName: String!
}

type CommitteePagination {
  committees: [Committee]!
  pageInfo: PaginationInfo!
}

scalar Date
scalar UUID

type Mandate @key(fields: "id") {
  id: UUID!
  start_date: Date
  end_date: Date
  position: Position
  member: Member
}

type MandatePagination {
  mandates: [Mandate!]!
  pageInfo: PaginationInfo!
}

type Door @key(fields: "name") {
  name: String!
  id: String
  accessPolicies: [AccessPolicy!]
  """
  returns all stundet ids that have active policies for this door.
  """
  studentIds: [String!]
}

type Api @key(fields: "name") {
  name: String!
  accessPolicies: [AccessPolicy!]
}

type AccessPolicy @key(fields: "id") {
  id: UUID!
  accessor: String!
  start_datetime: Date
  end_datetime: Date
}

type Ping @key(fields: "id") {
  from: Member!
  counter: Int!
  lastPing: Date!
}

type PaginationInfo {
  totalPages: Int!
  totalItems: Int!
  page: Int!
  perPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

input MemberFilter {
  id: UUID
  student_id: String
  first_name: String
  nickname: String
  last_name: String
  class_programme: String
  class_year: Int
}

input CommitteeFilter {
  id: UUID
  short_name: String
}

input PositionFilter {
  id: String
  name: String
  committee_id: UUID
  committee_short_name: String
  active: Boolean
  year: Int
}

input MandateFilter {
  id: UUID
  position_id: String
  position_ids: [String!]
  member_id: UUID
  start_date: Date
  end_date: Date
  onlyActive: Boolean
}

type MemberMutations {
  create(input: CreateMember!): Member
  update(id: UUID!, input: UpdateMember!): Member
  updateFoodPreference(id: UUID!, foodPreference: String!): Member
  remove(id: UUID!): Member
  ping(id: UUID!): Boolean
}

type PositionMutations {
  create(input: CreatePosition!): Position
  update(id: String!, input: UpdatePosition!): Position
  remove(id: String!): Position
}

type CommitteeMutations {
  create(input: CreateCommittee!): Committee
  update(id: UUID!, input: UpdateCommittee!): Committee
  remove(id: UUID!): Committee
}

type MandateMutations {
  create(input: CreateMandate!): Mandate
  update(id: UUID!, input: UpdateMandate!): Mandate
  remove(id: UUID!): Mandate
}

type AccessMutations {
  door: DoorMutations
  policy: PolicyMutations
}

type DoorMutations {
  create(input: CreateDoor!): Door
  remove(name: String!): Door
}

type PolicyMutations {
  createDoorAccessPolicy(input: CreateDoorAccessPolicy!): AccessPolicy
  createApiAccessPolicy(input: CreateApiAccessPolicy!): AccessPolicy
  remove(id: UUID!): AccessPolicy
}

type AdminSetting @key(fields: "key") {
  key: String!
  value: String!
}

type AdminMutations {
  updateSearchIndex: Boolean
  syncMandatesWithKeycloak: Boolean
  seed: Boolean
  createSetting(key: String!, value: String!): AdminSetting
  updateSetting(key: String!, value: String!): AdminSetting
  deleteSetting(key: String!): AdminSetting
  setStabHiddenPeriod(start: Date!, end: Date!): [AdminSetting]
}

input CreateMember {
  student_id: String!
  first_name: String!
  nickname: String
  last_name: String!
  class_programme: String!
  class_year: Int!
  picture_path: String
  food_preference: String
}

input UpdateMember {
  first_name: String
  nickname: String
  last_name: String
  class_programme: String
  class_year: Int
  picture_path: String
  food_preference: String
}

input CreatePosition {
  id: String!
  name: String!
  email: String
  committee_id: UUID
  active: Boolean
  boardMember: Boolean
}

input UpdatePosition {
  name: String
  nameEn: String
  description: String
  descriptionEn: String
  committee_id: UUID
  email: String
}

input CreateCommittee {
  name: String!
  name_en: String!
  short_name: String!
}

input UpdateCommittee {
  name: String
}

input CreateMandate {
  position_id: String!
  member_id: UUID!
  start_date: Date!
  end_date: Date!
}

input UpdateMandate {
  position_id: String
  member_id: UUID
  start_date: Date
  end_date: Date
}

input CreateDoor {
  name: String!
  id: String
}

input CreateDoorAccessPolicy {
  doorName: String!
  who: String!
  startDatetime: Date
  endDatetime: Date
}

input CreateApiAccessPolicy {
  apiName: String!
  who: String!
}

type CustomAuthor @key(fields: "id") {
  id: UUID!
  name: String
  nameEn: String
  imageUrl: Url
}

type Author @key(fields: "id") {
  id: UUID!
  member: Member!
  mandate: Mandate
  customAuthor: CustomAuthor
  type: String!
}

input CreateAuthor {
  mandateId: UUID
  customAuthorId: UUID
}
