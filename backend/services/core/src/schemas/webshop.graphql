extend type Query {
  product(id: UUID!): Product
  products(categoryId: UUID): [Product]!
  productCategories: [ProductCategory]!
  myCart: Cart
  payment(id: UUID!): Payment
  chest(studentId: String!): UserInventory
  getMembersByProduct(productId: UUID!): [MemberByProduct]
}

extend type Mutation {
  webshop: WebshopMutations
}

type WebshopMutations {
  addToMyCart(inventoryId: UUID!, quantity: Int!): Cart
  removeMyCart: Boolean
  removeFromMyCart(inventoryId: UUID!, quantity: Int!): Cart
  createProduct(input: CreateProductInput!): Product
  updateProduct(input: UpdateProductInput!): Product
  deleteProduct(productId: UUID!): Boolean
  addInventory(input: CreateInventoryInput!): Product
  updateInventory(input: UpdateInventoryInput!): Product
  incrementQuantity(inventoryId: UUID!, quantity: Int!): Product
  decrementQuantity(inventoryId: UUID!, quantity: Int!): Product
  deleteInventory(inventoryId: UUID!): Boolean
  initiatePayment(phoneNumber: String!): Payment
  freeCheckout: Payment
  updatePaymentStatus(paymentId: String!, status: PaymentStatus!): Payment
  consumeItem(itemId: UUID!): UserInventory
}

type MemberByProduct {
  member: Member!
  userInventoryItem: UserInventoryItem!
}

enum PaymentStatus {
  PENDING
  PAID
  DECLINED
  ERROR
  CANCELLED
}

type UserInventory {
  id: UUID!
  items: [UserInventoryItem]!
}

type UserInventoryItem {
  id: UUID!
  productId: UUID
  name: String!
  description: String!
  paidPrice: Float!
  imageUrl: String!
  variant: String
  category: ProductCategory
  paidAt: Date!
  consumedAt: Date
}

type Product {
  id: UUID!
  name: String!
  description: String!
  price: Float!
  maxPerUser: Int!
  imageUrl: String!
  inventory: [ProductInventory]!
  category: ProductCategory
  releaseDate: Date!
}

input CreateProductInput {
  name: String!
  description: String!
  price: Float!
  imageUrl: String!
  categoryId: UUID!
  maxPerUser: Int!
  releaseDate: Date!
}

input UpdateProductInput {
  productId: UUID!
  name: String
  description: String
  price: Float
  imageUrl: String
  categoryId: UUID
  maxPerUser: Int
  releaseDate: Date
}

input CreateInventoryInput {
  productId: UUID!
  quantity: Int!
  discountId: UUID
  variant: String
}

input UpdateInventoryInput {
  inventoryId: UUID!
  discountId: UUID
  variant: String
}

type Discount {
  id: UUID!
  name: String!
  description: String!
  discountPercentage: Float!
}

type ProductInventory {
  id: UUID!
  variant: String
  quantity: Int!
  discount: Discount
}

type ProductCategory {
  id: UUID!
  name: String!
  description: String!
}

type Cart {
  id: UUID!
  cartItems: [CartItem]!
  totalPrice: Float!
  totalQuantity: Int!
  expiresAt: Date!
}

type CartInventory {
  id: UUID!
  variant: String
  quantity: Int!
  discount: Discount
  inventoryId: UUID!
}

type CartItem {
  id: UUID!
  name: String!
  description: String!
  price: Float!
  maxPerUser: Int!
  imageUrl: String!
  inventory: [CartInventory]!
  category: ProductCategory
}

type Payment {
  id: UUID!
  amount: Float!
  currency: String!
  paymentStatus: String!
  paymentMethod: String!
  createdAt: Date!
  updatedAt: Date!
}

type Order {
  id: UUID!
  products: [Product]
  user: Member!
  total: Float!
  payment: Payment
  createdAt: Date!
  updatedAt: Date!
}
